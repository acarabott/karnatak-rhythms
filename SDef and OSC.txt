//SynthDef and FFTBuffer
(
SynthDef(\konnaHit, { arg out=0, bufnum=0, recBuf=1, rate=1, numFrames=44100;
	var chain, signal;
	chain = PV_PlayBuf(bufnum, recBuf, rate, 0, 0);
	signal = IFFT(chain, 1);
	DetectSilence.ar(signal, doneAction:2);
	Out.ar(out, signal.dup);
	}).load(s);


)

s.makeBundle(2.0, 
	{
		
	}
)

//NetAddr and OSCresponder
(
~fftBuffArray = Array.fill(10, {Buffer.alloc(s, 1024)});

//Syllables Array
~syls = Array.with("Tam", "Ta", "Ka", "Ki", "Tah", "Di", "Mi", "Da", "Gi", "Na", "Dom", "-", "Ju", "Lan", "Gu", "Tom", "Nam", "Ri", "Du", "Din");
//Buffers for PV analysis files
h=Array.newClear(~syls.size);
h.size.do({|i| h[i] = Buffer.read(s, "sounds/Solkattu/"++~syls[i]++".scpv")});


//FFT Buffers and Routine
~fftBuff=~fftBuffArray[0];

~fftRout = Routine.new({
	inf.do({|i|
		~fftBuff = ~fftBuffArray.wrapAt(i);
		0.yield;
	})
});
)
~netAd = NetAddr("127.0.0.1", 57120);
o = OSCresponder(n, '/syllable', { |t, r, msg| 
	var ind;
	ind = ~syls.indexOf(msg[1]);
	msg[1].postln;
	Synth(\konnaHit, [\out, 0, \bufnum, ~fftBuff, \recBuf, h[ind], \rate, msg[2], \numFrames, h[ind].numFrames]);
	~fftRout.next;
	}
).add;
)

a = Konnakol.new(4, 2)
a.phrase
a.speed
a.get.play

~netAd.sendMsg('/syllable', word[i], 3.min(1/speed));

b=a.atSpeed(1)
b.get.play

